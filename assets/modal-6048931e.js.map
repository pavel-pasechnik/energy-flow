{"version":3,"file":"modal-6048931e.js","sources":["../../src/js/modal.js"],"sourcesContent":["import { getRequest } from './api-energy-flow';\nimport svgUrl from '../img/sprite.svg';\n\n// Show the exercise modal with the given exercise ID\nfunction showExerciseModal(exerciseId, isFavoritesBtn = false) {\n  const modal = document.getElementById('exerciseModal');\n  const backdrop = document.getElementById('modalBackdrop');\n\n  // Show both modal and backdrop\n  modal.classList.add('is-visible');\n  backdrop.classList.add('is-visible');\n\n  // Fetch and fill modal data\n  getRequest(`/exercises/${exerciseId}`)\n    .then(data => {\n      if (data && data.gifUrl) {\n        fillModalWithData(data);\n      } else {\n        console.error('Invalid data or missing gifUrl');\n      }\n    })\n    .catch(error => {\n      console.error('Error fetching exercise data', error);\n    })\n    .finally(() => {\n      // Pass isFavoritesBtn to closeExerciseModal\n      const closeButton = document.getElementById('closeButton');\n      closeButton.addEventListener('click', () => {\n        closeExerciseModal(isFavoritesBtn);\n      });\n    });\n}\n\n// Close the exercise modal\nfunction closeExerciseModal(isFavoritesBtn = false) {\n  const modal = document.getElementById('exerciseModal');\n  const backdrop = document.getElementById('modalBackdrop');\n\n  // Hide both modal and backdrop\n  modal.classList.remove('is-visible');\n  backdrop.classList.remove('is-visible');\n\n  if (isFavoritesBtn) {\n    location.reload();\n  }\n}\n\n// Fill the modal with data\nfunction fillModalWithData(data) {\n  const modal = document.getElementById('exerciseModal');\n  const backdrop = document.getElementById('modalBackdrop');\n  const modalContent = document.getElementById('exerciseDetails');\n\n  modalContent.innerHTML = '';\n\n  // Creating a DOM element for the modal window\n  const exerciseDetails = document.createElement('div');\n  exerciseDetails.innerHTML = `\n    <div class=\"exercise-details\">\n      <button id=\"closeButton\" class=\"close-button\">\n      <svg class=\"close-icon\" width=\"12\" height=\"12\" >\n      <use href=\"${svgUrl}#close\"></use>\n        </svg>\n      </button>\n      <div class=\"content-wrapper\">\n        <div class=\"left-section\">\n          <div class=\"exercise-image\">\n            <img src=\"${data.gifUrl}\" alt=\"${data.name}\" />\n          </div>\n        </div>\n        <div class=\"right-section\">\n          <div class=\"exercise-info\">\n            <h2 class=\"exercise-name\">${data.name}</h2>\n            <div class=\"star-container\">\n              <span class=\"rating-value\">${formatRating(data.rating)}</span>\n              <div class=\"star-rating\">${getStarRating(data.rating)}</div>\n            </div>\n            <div class=\"info-block\">\n              <hr class=\"section-divider-top\">\n              <p class=\"info-item\"><span class=\"info-label\">Target:</span> ${\n                data.target\n              }</p>\n              <p class=\"info-item\"><span class=\"info-label\">Body Part:</span> ${\n                data.bodyPart\n              }</p>\n              <p class=\"info-item\"><span class=\"info-label\">Equipment:</span> ${\n                data.equipment\n              }</p>\n              <p class=\"info-item\"><span class=\"info-label\">Popularity:</span> ${\n                data.popularity\n              }</p>\n              <p class=\"info-item\"><span class=\"info-label\">Burned calories:</span> ${\n                data.burnedCalories\n              }/${data.time} min</p>\n              <hr class=\"section-divider-bottom\">\n            </div>\n            <div class=\"exercise-description\">\n              <p>${data.description}</p>\n            </div>\n              <div class=\"action-buttons\">\n                  <button class=\"favorite-button\" id=\"favoriteButton\">\n                    <span>Add to Favorites</span>\n                    <svg class=\"heart-icon\" width=\"20\" height=\"20\" >\n                    <use href=\"${svgUrl}#heart\"></use>\n                    </svg>\n\n                  </button>\n                  <button class=\"rating-button\"  data-action=\"${\n                    data._id\n                  }\">Give a Rating</button>\n              </div>\n          </div>\n        </div>\n      </div>\n    </div>`;\n\n  modalContent.appendChild(exerciseDetails);\n  modal.classList.add('is-visible');\n\n  const favoriteButton = document.getElementById('favoriteButton');\n\n  // Checking if the exercise is already in favorites\n  if (isExerciseFavorite(data._id)) {\n    setRemoveFromFavorites(favoriteButton);\n  }\n\n  // Adding event listener for the \"Favorite\" button\n  favoriteButton.addEventListener('click', () => {\n    if (isExerciseFavorite(data._id)) {\n      removeFromFavorites(data._id);\n      setAddToFavorites(favoriteButton);\n    } else {\n      addToFavorites(data);\n      setRemoveFromFavorites(favoriteButton);\n    }\n  });\n\n  // Adding event listener for the modal window container\n  backdrop.addEventListener('click', event => {\n    // Prevent the event from reaching the document level\n    event.stopPropagation();\n    closeExerciseModal();\n  });\n\n  const closeButton = document.getElementById('closeButton');\n  closeButton.addEventListener('click', () => {\n    closeExerciseModal();\n  });\n\n  // Adding event listener for closing the modal window with the \"Escape\" key\n  document.addEventListener('keydown', event => {\n    if (event.key === 'Escape') {\n      closeExerciseModal();\n    }\n  });\n}\n\n// Format the rating value\nfunction formatRating(rating) {\n  return isNaN(rating) ? 'N/A' : rating.toFixed(1);\n}\n\n// Generate the star rating SVG based on the given rating\nfunction getStarRating(rating) {\n  const filledStars = Math.round(rating);\n  const emptyStars = 5 - filledStars;\n  const filledStarSvg = `<svg class=\"star\" width=\"18\" height=\"18\" >\n    <use href=\"${svgUrl}#colorstar\"></use>\n  </svg>`;\n  \n  const emptyStarSvg = `\n    <svg class=\"star empty-star\" width=\"18\" height=\"18\" >\n      <use href=\"${svgUrl}#star\"></use>\n    </svg>`;\n  \n\n  let stars = '';\n\n  for (let i = 0; i < filledStars; i++) {\n    stars += filledStarSvg;\n  }\n\n  for (let i = 0; i < emptyStars; i++) {\n    stars += emptyStarSvg;\n  }\n\n  return stars;\n}\n\n// Check if the exercise is already in favorites\nfunction isExerciseFavorite(exerciseId) {\n  const favorites = getFavorites();\n  return favorites.some(exercise => exercise._id === exerciseId);\n}\n\n// Get the list of favorite exercises from local storage\nfunction getFavorites() {\n  return JSON.parse(localStorage.getItem('favorites')) || [];\n}\n\n// Add the exercise to the list of favorites\nfunction addToFavorites(exercise) {\n  const favorites = getFavorites();\n  favorites.push(exercise);\n  localStorage.setItem('favorites', JSON.stringify(favorites));\n}\n\n// Remove the exercise from the list of favorites\nfunction removeFromFavorites(exerciseId) {\n  const favorites = getFavorites();\n  const updatedFavorites = favorites.filter(\n    exercise => exercise._id !== exerciseId\n  );\n\n  if (updatedFavorites.length > 0) {\n    localStorage.setItem('favorites', JSON.stringify(updatedFavorites));\n  } else {\n    localStorage.removeItem('favorites');\n  }\n}\n\n// Set the \"Remove from Favorites\" state for the button\nfunction setRemoveFromFavorites(button) {\n  const span = button.querySelector('span');\n  span.textContent = 'Remove from';\n  const use = button.querySelector('use');\n  use.setAttribute('href', `${svgUrl}#heart`);\n\n}\n\n\n// Set the \"Add to Favorites\" state for the button\nfunction setAddToFavorites(button) {\n  const span = button.querySelector('span');\n  span.textContent = 'Add to Favorites';\n  const use = button.querySelector('use');\n  use.setAttribute('href', `${svgUrl}#heart`);\n}\n\n\ndocument.addEventListener('click', event => {\n  const clickedElement = event.target;\n\n  // Check if clicked on a button with class exercises-gallery-btn-start\n  if (clickedElement.classList.contains('exercises-gallery-btn-start')) {\n    const exerciseId = clickedElement.dataset.action;\n    showExerciseModal(exerciseId, false); \n  }\n\n  // Check if clicked on a button with class favorites-btn-arrow\n  if (clickedElement.classList.contains('favorites-btn-arrow')) {\n    const exerciseId = clickedElement.dataset.action;\n    showExerciseModal(exerciseId, true); \n  }\n});"],"names":["showExerciseModal","exerciseId","isFavoritesBtn","modal","backdrop","getRequest","data","fillModalWithData","error","closeExerciseModal","modalContent","exerciseDetails","svgUrl","formatRating","getStarRating","favoriteButton","isExerciseFavorite","setRemoveFromFavorites","removeFromFavorites","setAddToFavorites","addToFavorites","event","rating","filledStars","emptyStars","filledStarSvg","emptyStarSvg","stars","i","getFavorites","exercise","favorites","updatedFavorites","button","span","clickedElement"],"mappings":"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"}