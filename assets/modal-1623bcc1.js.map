{"version":3,"file":"modal-1623bcc1.js","sources":["../../src/js/modal.js"],"sourcesContent":["// Add all object to Local\nimport { getRequest } from './api-energy-flow';\n// Function to show the modal and backdrop\nfunction showExerciseModal(exerciseId) {\n  const modal = document.getElementById('exerciseModal');\n  const backdrop = document.getElementById('modalBackdrop');\n\n  // Show both modal and backdrop\n  modal.classList.add('is-visible');\n  backdrop.classList.add('is-visible');\n\n  // Fetch and fill modal data\n  getRequest(`/exercises/${exerciseId}`).then(data => {\n    fillModalWithData(data);\n  });\n}\n\n// Function to close the modal and backdrop\nfunction closeExerciseModal() {\n  const modal = document.getElementById('exerciseModal');\n  const backdrop = document.getElementById('modalBackdrop');\n\n  // Hide both modal and backdrop\n  modal.classList.remove('is-visible');\n  backdrop.classList.remove('is-visible');\n}\n\n// Function to fill the modal window with data\nfunction fillModalWithData(data) {\n  const modal = document.getElementById('exerciseModal');\n  const backdrop = document.getElementById('modalBackdrop');\n  const modalContent = document.getElementById('exerciseDetails');\n\n  modalContent.innerHTML = '';\n\n  // Creating a DOM element for the modal window\n  const exerciseDetails = document.createElement('div');\n  exerciseDetails.innerHTML = `\n    <div class=\"exercise-details\">\n      <button id=\"closeButton\" class=\"close-button\">\n        <svg class=\"close-icon\" width=\"12\" height=\"12\" >\n          <use href=\"/energy-flow/assets/sprite-0567d6ea.svg#close\"></use>\n        </svg>\n      </button>\n      <div class=\"content-wrapper\">\n        <div class=\"left-section\">\n          <div class=\"exercise-image\">\n            <img src=\"${data.gifUrl}\" alt=\"${data.name}\" />\n          </div>\n        </div>\n        <div class=\"right-section\">\n          <div class=\"exercise-info\">\n            <h2 class=\"exercise-name\">${data.name}</h2>\n            <div class=\"star-container\">\n              <span class=\"rating-value\">${formatRating(data.rating)}</span>\n              <div class=\"star-rating\">${getStarRating(data.rating)}</div>\n            </div>\n            <div class=\"info-block\">\n              <hr class=\"section-divider-top\">\n              <p class=\"info-item\"><span class=\"info-label\">Target:</span> ${data.target}</p>\n              <p class=\"info-item\"><span class=\"info-label\">Body Part:</span> ${data.bodyPart}</p>\n              <p class=\"info-item\"><span class=\"info-label\">Equipment:</span> ${data.equipment}</p>\n              <p class=\"info-item\"><span class=\"info-label\">Popularity:</span> ${data.popularity}</p>\n              <p class=\"info-item\"><span class=\"info-label\">Burned calories:</span> ${data.burnedCalories}/${data.time} min</p>\n              <hr class=\"section-divider-bottom\">\n            </div>\n            <div class=\"exercise-description\">\n              <p>${data.description}</p>\n            </div>\n            <div class=\"action-buttons\">\n              <button class=\"favorite-button\" id=\"favoriteButton\">\n                <span>Add to Favorites</span>\n                <svg class=\"heart-icon\" width=\"20\" height=\"20\" >\n                  <use href=\"/energy-flow/assets/sprite-0567d6ea.svg#heart\"></use>\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>`;\n\n  modalContent.appendChild(exerciseDetails);\n  modal.classList.add('is-visible');\n\n  const favoriteButton = document.getElementById('favoriteButton');\n\n  // Checking if the exercise is already in favorites\n  if (isExerciseFavorite(data._id)) {\n    setRemoveFromFavorites(favoriteButton);\n  }\n\n  // Adding event listener for the \"Favorite\" button\n  favoriteButton.addEventListener('click', () => {\n    if (isExerciseFavorite(data._id)) {\n      removeFromFavorites(data._id);\n      setAddToFavorites(favoriteButton);\n    } else {\n      addToFavorites(data); \n      setRemoveFromFavorites(favoriteButton);\n    }\n  });\n\n  // Adding event listener for the modal window container\n  backdrop.addEventListener('click', () => {\n    closeExerciseModal();\n  });\n\n  const closeButton = document.getElementById('closeButton');\n  closeButton.addEventListener('click', () => {\n    closeExerciseModal();\n  });\n\n  // Adding event listener for closing the modal window with the \"Escape\" key\n  document.addEventListener(\"keydown\", (event) => {\n    if (event.key === \"Escape\") {\n      closeExerciseModal();\n    }\n  });\n}\n\n// Function to format rating with one decimal place\nfunction formatRating(rating) {\n  return isNaN(rating) ? 'N/A' : Math.round(rating).toFixed(1);\n}\n\n// Function to get star rating\nfunction getStarRating(rating) {\n  const filledStars = Math.round(rating);\n  const emptyStars = 5 - filledStars;\n  const filledStarSvg = `<svg class=\"star\" width=\"18\" height=\"18\" >\n    <use href=\"/energy-flow/assets/sprite-0567d6ea.svg#colorstar\"></use>\n  </svg>`;\n  const emptyStarSvg = `\n    <svg class=\"star empty-star\" width=\"18\" height=\"18\" >\n      <use href=\"/energy-flow/assets/sprite-0567d6ea.svg#star\"></use>\n    </svg>`;\n\n  let stars = '';\n\n  for (let i = 0; i < filledStars; i++) {\n    stars += filledStarSvg;\n  }\n\n  for (let i = 0; i < emptyStars; i++) {\n    stars += emptyStarSvg;\n  }\n\n  return stars;\n}\n\n// Function to check if the exercise is already in favorites\nfunction isExerciseFavorite(exerciseId) {\n  const favorites = getFavorites();\n  return favorites.some(exercise => exercise._id === exerciseId);\n}\n\n// Function to get the list of favorite exercises from Local Storage\nfunction getFavorites() {\n  return JSON.parse(localStorage.getItem('favorites')) || [];\n}\n\n// Function to add an exercise to favorites in Local Storage\nfunction addToFavorites(exercise) {\n  const favorites = getFavorites();\n  favorites.push(exercise);\n  localStorage.setItem('favorites', JSON.stringify(favorites));\n}\n\n// Function to remove an exercise from favorites in Local Storage\nfunction removeFromFavorites(exerciseId) {\n  const favorites = getFavorites();\n  const updatedFavorites = favorites.filter(exercise => exercise._id !== exerciseId);\n  localStorage.setItem('favorites', JSON.stringify(updatedFavorites));\n}\n\n// Function to set the \"Remove from Favorites\" button state\nfunction setRemoveFromFavorites(button) {\n  const span = button.querySelector('span');\n  span.textContent = 'Remove from';\n  const use = button.querySelector('use');\n  use.setAttribute('href', '/energy-flow/assets/sprite-0567d6ea.svg#heart');\n}\n\n// Function to set the \"Add to Favorites\" button state\nfunction setAddToFavorites(button) {\n  const span = button.querySelector('span');\n  span.textContent = 'Add to Favorites';\n  const use = button.querySelector('use');\n  use.setAttribute('href', '/energy-flow/assets/sprite-0567d6ea.svg#heart');\n}\n\n// // Added event listener for the start button in the exercise gallery\n// document.addEventListener('click', event => {\n//   if (event.target.classList.contains('exercises-gallery-btn-start')) {\n//     const exerciseId = event.target.dataset.action;\n//     showExerciseModal(exerciseId);\n//   }\n// });\n// пропрацювати\ndocument.addEventListener('click', event => {\n  if (event.target.classList.contains('exercises-gallery-btn-start')) {\n    const exerciseId = event.target.dataset.action;\n    showExerciseModal(exerciseId);\n  }\n  if (event.target.classList.contains('favorites-btn-arrow')) {\n    const exerciseId = event.target.getAttribute('data-action');\n    showExerciseModal(exerciseId);\n  }\n});\n\n\n// All code when we add only ID to Local Storage\n// import { getRequest } from './api-energy-flow';\n\n// // Function to show the modal and backdrop\n// function showExerciseModal(exerciseId) {\n//   const modal = document.getElementById('exerciseModal');\n//   const backdrop = document.getElementById('modalBackdrop');\n\n//   // Show both modal and backdrop\n//   modal.classList.add('is-visible');\n//   backdrop.classList.add('is-visible');\n\n//   // Fetch and fill modal data\n//   getRequest(`/exercises/${exerciseId}`).then(data => {\n//     fillModalWithData(data);\n//   });\n// }\n\n// // Function to close the modal and backdrop\n// function closeExerciseModal() {\n//   const modal = document.getElementById('exerciseModal');\n//   const backdrop = document.getElementById('modalBackdrop');\n\n//   // Hide both modal and backdrop\n//   modal.classList.remove('is-visible');\n//   backdrop.classList.remove('is-visible');\n// }\n\n// // Function to fill the modal window with data\n// function fillModalWithData(data) {\n//   const modal = document.getElementById('exerciseModal');\n//   const backdrop = document.getElementById('modalBackdrop');\n//   const modalContent = document.getElementById('exerciseDetails');\n\n//   modalContent.innerHTML = '';\n\n//   // Creating a DOM element for the modal window\n//   const exerciseDetails = document.createElement('div');\n//   exerciseDetails.innerHTML = `\n//     <div class=\"exercise-details\">\n//       <button id=\"closeButton\" class=\"close-button\">\n//         <svg class=\"close-icon\" width=\"12\" height=\"12\" >\n//           <use href=\"./img/sprite.svg#close\"></use>\n//         </svg>\n//       </button>\n//       <div class=\"content-wrapper\">\n//         <div class=\"left-section\">\n//           <div class=\"exercise-image\">\n//             <img src=\"${data.gifUrl}\" alt=\"${data.name}\" />\n//           </div>\n//         </div>\n//         <div class=\"right-section\">\n//           <div class=\"exercise-info\">\n//             <h2 class=\"exercise-name\">${data.name}</h2>\n//             <div class=\"star-container\">\n//               <span class=\"rating-value\">${formatRating(data.rating)}</span>\n//               <div class=\"star-rating\">${getStarRating(data.rating)}</div>\n//             </div>\n//             <div class=\"info-block\">\n//               <hr class=\"section-divider-top\">\n//               <p class=\"info-item\"><span class=\"info-label\">Target:</span> ${data.target}</p>\n//               <p class=\"info-item\"><span class=\"info-label\">Body Part:</span> ${data.bodyPart}</p>\n//               <p class=\"info-item\"><span class=\"info-label\">Equipment:</span> ${data.equipment}</p>\n//               <p class=\"info-item\"><span class=\"info-label\">Popularity:</span> ${data.popularity}</p>\n//               <p class=\"info-item\"><span class=\"info-label\">Burned calories:</span> ${data.burnedCalories}/${data.time} min</p>\n//               <hr class=\"section-divider-bottom\">\n//             </div>\n//             <div class=\"exercise-description\">\n//               <p>${data.description}</p>\n//             </div>\n//             <div class=\"action-buttons\">\n//               <button class=\"favorite-button\" id=\"favoriteButton\">\n//                 <span>Add to Favorites</span>\n//                 <svg class=\"heart-icon\" width=\"20\" height=\"20\" >\n//                   <use href=\"./img/sprite.svg#heart\"></use>\n//                 </svg>\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>`;\n\n//   modalContent.appendChild(exerciseDetails);\n//   modal.classList.add('is-visible');\n\n//   const favoriteButton = document.getElementById('favoriteButton');\n\n//   // Checking if the exercise is already in favorites\n//   if (isExerciseFavorite(data._id)) {\n//     setRemoveFromFavorites(favoriteButton);\n//   }\n\n//   // Adding event listener for the \"Favorite\" button\n//   favoriteButton.addEventListener('click', () => {\n//     if (isExerciseFavorite(data._id)) {\n//       removeFromFavorites(data._id);\n//       setAddToFavorites(favoriteButton);\n//     } else {\n//       addToFavorites(data._id);\n//       setRemoveFromFavorites(favoriteButton);\n//     }\n//   });\n\n//   // Adding event listener for the modal window container\n//   backdrop.addEventListener('click', () => {\n//     closeExerciseModal();\n//   });\n\n//   const closeButton = document.getElementById('closeButton');\n//   closeButton.addEventListener('click', () => {\n//     closeExerciseModal();\n//   });\n\n//   // Adding event listener for closing the modal window with the \"Escape\" key\n//   document.addEventListener(\"keydown\", (event) => {\n//     if (event.key === \"Escape\") {\n//       closeExerciseModal();\n//     }\n//   });\n// }\n\n// // Function to format rating with one decimal place\n// function formatRating(rating) {\n//   return isNaN(rating) ? 'N/A' : Math.round(rating).toFixed(1);\n// }\n\n// // Function to get star rating\n// function getStarRating(rating) {\n//   const filledStars = Math.round(rating);\n//   const emptyStars = 5 - filledStars;\n//   const filledStarSvg = `<svg class=\"star\" width=\"18\" height=\"18\" >\n//     <use href=\"./img/sprite.svg#colorstar\"></use>\n//   </svg>`;\n//   const emptyStarSvg = `\n//     <svg class=\"star empty-star\" width=\"18\" height=\"18\" >\n//       <use href=\"./img/sprite.svg#star\"></use>\n//     </svg>`;\n\n//   let stars = '';\n\n//   for (let i = 0; i < filledStars; i++) {\n//     stars += filledStarSvg;\n//   }\n\n//   for (let i = 0; i < emptyStars; i++) {\n//     stars += emptyStarSvg;\n//   }\n\n//   return stars;\n// }\n\n// // Function to check if the exercise is already in favorites\n// function isExerciseFavorite(exerciseId) {\n//   const favorites = getFavorites();\n//   return favorites.includes(exerciseId);\n// }\n\n// // Function to get the list of favorite exercises from Local Storage\n// function getFavorites() {\n//   return JSON.parse(localStorage.getItem('favorites')) || [];\n// }\n\n// // Function to add an exercise to favorites in Local Storage\n// function addToFavorites(exerciseId) {\n//   const favorites = getFavorites();\n//   favorites.push(exerciseId);\n//   localStorage.setItem('favorites', JSON.stringify(favorites));\n// }\n\n// // Function to remove an exercise from favorites in Local Storage\n// function removeFromFavorites(exerciseId) {\n//   const favorites = getFavorites();\n//   const updatedFavorites = favorites.filter(id => id !== exerciseId);\n//   localStorage.setItem('favorites', JSON.stringify(updatedFavorites));\n// }\n\n// // Function to set the \"Remove from Favorites\" button state\n// function setRemoveFromFavorites(button) {\n//   const span = button.querySelector('span');\n//   span.textContent = 'Remove from';\n//   const use = button.querySelector('use');\n//   use.setAttribute('href', './img/sprite.svg#heart');\n// }\n\n// // Function to set the \"Add to Favorites\" button state\n// function setAddToFavorites(button) {\n//   const span = button.querySelector('span');\n//   span.textContent = 'Add to Favorites';\n//   const use = button.querySelector('use');\n//   use.setAttribute('href', './img/sprite.svg#heart');\n// }\n\n// // Added event listener for the start button in the exercise gallery\n// document.addEventListener('click', event => {\n//   if (event.target.classList.contains('exercises-gallery-btn-start')) {\n//     const exerciseId = event.target.dataset.action;\n//     showExerciseModal(exerciseId);\n//   }\n// });\n\n\n\n\n\n"],"names":["showExerciseModal","exerciseId","modal","backdrop","getRequest","data","fillModalWithData","closeExerciseModal","modalContent","exerciseDetails","formatRating","getStarRating","favoriteButton","isExerciseFavorite","setRemoveFromFavorites","removeFromFavorites","setAddToFavorites","addToFavorites","event","rating","filledStars","emptyStars","filledStarSvg","emptyStarSvg","stars","i","getFavorites","exercise","favorites","updatedFavorites","button","span"],"mappings":"wFAGA,SAASA,EAAkBC,EAAY,CACrC,MAAMC,EAAQ,SAAS,eAAe,eAAe,EAC/CC,EAAW,SAAS,eAAe,eAAe,EAGxDD,EAAM,UAAU,IAAI,YAAY,EAChCC,EAAS,UAAU,IAAI,YAAY,EAGnCC,EAAW,cAAcH,CAAU,EAAE,EAAE,KAAKI,GAAQ,CAClDC,EAAkBD,CAAI,CAC1B,CAAG,CACH,CAGA,SAASE,GAAqB,CAC5B,MAAML,EAAQ,SAAS,eAAe,eAAe,EAC/CC,EAAW,SAAS,eAAe,eAAe,EAGxDD,EAAM,UAAU,OAAO,YAAY,EACnCC,EAAS,UAAU,OAAO,YAAY,CACxC,CAGA,SAASG,EAAkBD,EAAM,CAC/B,MAAMH,EAAQ,SAAS,eAAe,eAAe,EAC/CC,EAAW,SAAS,eAAe,eAAe,EAClDK,EAAe,SAAS,eAAe,iBAAiB,EAE9DA,EAAa,UAAY,GAGzB,MAAMC,EAAkB,SAAS,cAAc,KAAK,EACpDA,EAAgB,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAUNJ,EAAK,MAAM,UAAUA,EAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,wCAKdA,EAAK,IAAI;AAAA;AAAA,2CAENK,EAAaL,EAAK,MAAM,CAAC;AAAA,yCAC3BM,EAAcN,EAAK,MAAM,CAAC;AAAA;AAAA;AAAA;AAAA,6EAIUA,EAAK,MAAM;AAAA,gFACRA,EAAK,QAAQ;AAAA,gFACbA,EAAK,SAAS;AAAA,iFACbA,EAAK,UAAU;AAAA,sFACVA,EAAK,cAAc,IAAIA,EAAK,IAAI;AAAA;AAAA;AAAA;AAAA,mBAInGA,EAAK,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAejCG,EAAa,YAAYC,CAAe,EACxCP,EAAM,UAAU,IAAI,YAAY,EAEhC,MAAMU,EAAiB,SAAS,eAAe,gBAAgB,EAG3DC,EAAmBR,EAAK,GAAG,GAC7BS,EAAuBF,CAAc,EAIvCA,EAAe,iBAAiB,QAAS,IAAM,CACzCC,EAAmBR,EAAK,GAAG,GAC7BU,EAAoBV,EAAK,GAAG,EAC5BW,EAAkBJ,CAAc,IAEhCK,EAAeZ,CAAI,EACnBS,EAAuBF,CAAc,EAE3C,CAAG,EAGDT,EAAS,iBAAiB,QAAS,IAAM,CACvCI,GACJ,CAAG,EAEmB,SAAS,eAAe,aAAa,EAC7C,iBAAiB,QAAS,IAAM,CAC1CA,GACJ,CAAG,EAGD,SAAS,iBAAiB,UAAYW,GAAU,CAC1CA,EAAM,MAAQ,UAChBX,GAEN,CAAG,CACH,CAGA,SAASG,EAAaS,EAAQ,CAC5B,OAAO,MAAMA,CAAM,EAAI,MAAQ,KAAK,MAAMA,CAAM,EAAE,QAAQ,CAAC,CAC7D,CAGA,SAASR,EAAcQ,EAAQ,CAC7B,MAAMC,EAAc,KAAK,MAAMD,CAAM,EAC/BE,EAAa,EAAID,EACjBE,EAAgB;AAAA;AAAA,UAGhBC,EAAe;AAAA;AAAA;AAAA,YAKrB,IAAIC,EAAQ,GAEZ,QAASC,EAAI,EAAGA,EAAIL,EAAaK,IAC/BD,GAASF,EAGX,QAASG,EAAI,EAAGA,EAAIJ,EAAYI,IAC9BD,GAASD,EAGX,OAAOC,CACT,CAGA,SAASX,EAAmBZ,EAAY,CAEtC,OADkByB,IACD,KAAKC,GAAYA,EAAS,MAAQ1B,CAAU,CAC/D,CAGA,SAASyB,GAAe,CACtB,OAAO,KAAK,MAAM,aAAa,QAAQ,WAAW,CAAC,GAAK,EAC1D,CAGA,SAAST,EAAeU,EAAU,CAChC,MAAMC,EAAYF,IAClBE,EAAU,KAAKD,CAAQ,EACvB,aAAa,QAAQ,YAAa,KAAK,UAAUC,CAAS,CAAC,CAC7D,CAGA,SAASb,EAAoBd,EAAY,CAEvC,MAAM4B,EADYH,IACiB,OAAOC,GAAYA,EAAS,MAAQ1B,CAAU,EACjF,aAAa,QAAQ,YAAa,KAAK,UAAU4B,CAAgB,CAAC,CACpE,CAGA,SAASf,EAAuBgB,EAAQ,CACtC,MAAMC,EAAOD,EAAO,cAAc,MAAM,EACxCC,EAAK,YAAc,cACPD,EAAO,cAAc,KAAK,EAClC,aAAa,OAAQ,+CAA+C,CAC1E,CAGA,SAASd,EAAkBc,EAAQ,CACjC,MAAMC,EAAOD,EAAO,cAAc,MAAM,EACxCC,EAAK,YAAc,mBACPD,EAAO,cAAc,KAAK,EAClC,aAAa,OAAQ,+CAA+C,CAC1E,CAUA,SAAS,iBAAiB,QAASZ,GAAS,CAC1C,GAAIA,EAAM,OAAO,UAAU,SAAS,6BAA6B,EAAG,CAClE,MAAMjB,EAAaiB,EAAM,OAAO,QAAQ,OACxClB,EAAkBC,CAAU,CAC7B,CACD,GAAIiB,EAAM,OAAO,UAAU,SAAS,qBAAqB,EAAG,CAC1D,MAAMjB,EAAaiB,EAAM,OAAO,aAAa,aAAa,EAC1DlB,EAAkBC,CAAU,CAC7B,CACH,CAAC"}